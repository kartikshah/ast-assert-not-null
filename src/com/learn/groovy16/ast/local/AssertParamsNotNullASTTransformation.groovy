package com.learn.groovy16.ast.localimport org.codehaus.groovy.transform.GroovyASTTransformationimport org.codehaus.groovy.ast.ASTNode
import org.codehaus.groovy.control.SourceUnit
import org.codehaus.groovy.transform.ASTTransformationimport org.codehaus.groovy.control.CompilePhaseimport org.codehaus.groovy.ast.MethodNodeimport org.codehaus.groovy.ast.ClassNodeimport org.codehaus.groovy.ast.Parameterimport org.codehaus.groovy.ast.stmt.Statementimport org.codehaus.groovy.ast.stmt.*import org.codehaus.groovy.ast.expr.BooleanExpressionimport org.codehaus.groovy.ast.expr.NotExpressionimport org.codehaus.groovy.ast.expr.*

@GroovyASTTransformation(phase=CompilePhase.SEMANTIC_ANALYSIS)
public class AssertParamsNotNullASTTransformation implements ASTTransformation {		public void visit(ASTNode[] nodes, SourceUnit source){		List methods = source.getAST()?.getMethods()		methods.findAll{MethodNode method -> 			method.getAnnotations(new ClassNode(AssertParam))		}.each{ MethodNode method -> 						List existingStatements = method.getCode().getStatements()			Parameter[] parameters = method.getParameters()			parameters.eachWithIndex(){ parameter, i ->				existingStatements.add(i,createAssertStatement(parameter))			}		}	}		public Statement createAssertStatement(Parameter parameter){		return new AssertStatement(				new BooleanExpression(						new VariableExpression(parameter)					)				)	}}
